//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoodFightSilverlightClient
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using FoodFightSilverlightClient.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace FoodFightSilverlightClient.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using FoodFightSilverlightClient.Web.Resources;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("FoodFightSilverlightClient-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'EquipmentTag' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class EquipmentTag : Entity
    {
        
        private int _equipmentTagID;
        
        private string _name;
        
        private EntityCollection<RecipeEquipmentTag> _recipeEquipmentTags;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEquipmentTagIDChanging(int value);
        partial void OnEquipmentTagIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EquipmentTag"/> class.
        /// </summary>
        public EquipmentTag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentTagID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EquipmentTagID
        {
            get
            {
                return this._equipmentTagID;
            }
            set
            {
                if ((this._equipmentTagID != value))
                {
                    this.OnEquipmentTagIDChanging(value);
                    this.ValidateProperty("EquipmentTagID", value);
                    this._equipmentTagID = value;
                    this.RaisePropertyChanged("EquipmentTagID");
                    this.OnEquipmentTagIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeEquipmentTag"/> entities.
        /// </summary>
        [Association("EquipmentTag_RecipeEquipmentTag", "EquipmentTagID", "EquipmentTagID")]
        [XmlIgnore()]
        public EntityCollection<RecipeEquipmentTag> RecipeEquipmentTags
        {
            get
            {
                if ((this._recipeEquipmentTags == null))
                {
                    this._recipeEquipmentTags = new EntityCollection<RecipeEquipmentTag>(this, "RecipeEquipmentTags", this.FilterRecipeEquipmentTags, this.AttachRecipeEquipmentTags, this.DetachRecipeEquipmentTags);
                }
                return this._recipeEquipmentTags;
            }
        }
        
        private void AttachRecipeEquipmentTags(RecipeEquipmentTag entity)
        {
            entity.EquipmentTag = this;
        }
        
        private void DetachRecipeEquipmentTags(RecipeEquipmentTag entity)
        {
            entity.EquipmentTag = null;
        }
        
        private bool FilterRecipeEquipmentTags(RecipeEquipmentTag entity)
        {
            return (entity.EquipmentTagID == this.EquipmentTagID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._equipmentTagID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'FoodFightDomainService' domain service.
    /// </summary>
    public sealed partial class FoodFightDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodFightDomainContext"/> class.
        /// </summary>
        public FoodFightDomainContext() : 
                this(new WebDomainClient<IFoodFightDomainServiceContract>(new Uri("FoodFightSilverlightClient-Web-FoodFightDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodFightDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FoodFightDomainService service URI.</param>
        public FoodFightDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IFoodFightDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodFightDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public FoodFightDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EquipmentTag"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<EquipmentTag> EquipmentTags
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EquipmentTag>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FoodGroup"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<FoodGroup> FoodGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FoodGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Ingredient"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<Ingredient> Ingredients
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Ingredient>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Recipe"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<Recipe> Recipes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Recipe>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RecipeEquipmentTag"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<RecipeEquipmentTag> RecipeEquipmentTags
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RecipeEquipmentTag>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RecipeFoodGroup"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<RecipeFoodGroup> RecipeFoodGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RecipeFoodGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RecipeIngredient"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<RecipeIngredient> RecipeIngredients
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RecipeIngredient>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RecipeStep"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<RecipeStep> RecipeSteps
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RecipeStep>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RecipeTag"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<RecipeTag> RecipeTags
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RecipeTag>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="State"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<State> States
        {
            get
            {
                return base.EntityContainer.GetEntitySet<State>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Tag"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<Tag> Tags
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Tag>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Unit"/> entities that have been loaded into this <see cref="FoodFightDomainContext"/> instance.
        /// </summary>
        public EntitySet<Unit> Units
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Unit>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EquipmentTag"/> entities using the 'GetEquipmentTags' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EquipmentTag"/> entities.</returns>
        public EntityQuery<EquipmentTag> GetEquipmentTagsQuery()
        {
            this.ValidateMethod("GetEquipmentTagsQuery", null);
            return base.CreateQuery<EquipmentTag>("GetEquipmentTags", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FoodGroup"/> entities using the 'GetFoodGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FoodGroup"/> entities.</returns>
        public EntityQuery<FoodGroup> GetFoodGroupsQuery()
        {
            this.ValidateMethod("GetFoodGroupsQuery", null);
            return base.CreateQuery<FoodGroup>("GetFoodGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Ingredient"/> entities using the 'GetIngredients' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Ingredient"/> entities.</returns>
        public EntityQuery<Ingredient> GetIngredientsQuery()
        {
            this.ValidateMethod("GetIngredientsQuery", null);
            return base.CreateQuery<Ingredient>("GetIngredients", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Recipe"/> entities using the 'GetRecipe' query.
        /// </summary>
        /// <param name="RecipeID">The value for the 'RecipeID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Recipe"/> entities.</returns>
        public EntityQuery<Recipe> GetRecipeQuery(int RecipeID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("RecipeID", RecipeID);
            this.ValidateMethod("GetRecipeQuery", parameters);
            return base.CreateQuery<Recipe>("GetRecipe", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RecipeEquipmentTag"/> entities using the 'GetRecipeEquipmentTags' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RecipeEquipmentTag"/> entities.</returns>
        public EntityQuery<RecipeEquipmentTag> GetRecipeEquipmentTagsQuery()
        {
            this.ValidateMethod("GetRecipeEquipmentTagsQuery", null);
            return base.CreateQuery<RecipeEquipmentTag>("GetRecipeEquipmentTags", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RecipeFoodGroup"/> entities using the 'GetRecipeFoodGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RecipeFoodGroup"/> entities.</returns>
        public EntityQuery<RecipeFoodGroup> GetRecipeFoodGroupsQuery()
        {
            this.ValidateMethod("GetRecipeFoodGroupsQuery", null);
            return base.CreateQuery<RecipeFoodGroup>("GetRecipeFoodGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RecipeIngredient"/> entities using the 'GetRecipeIngredients' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RecipeIngredient"/> entities.</returns>
        public EntityQuery<RecipeIngredient> GetRecipeIngredientsQuery()
        {
            this.ValidateMethod("GetRecipeIngredientsQuery", null);
            return base.CreateQuery<RecipeIngredient>("GetRecipeIngredients", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Recipe"/> entities using the 'GetRecipes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Recipe"/> entities.</returns>
        public EntityQuery<Recipe> GetRecipesQuery()
        {
            this.ValidateMethod("GetRecipesQuery", null);
            return base.CreateQuery<Recipe>("GetRecipes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RecipeStep"/> entities using the 'GetRecipeSteps' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RecipeStep"/> entities.</returns>
        public EntityQuery<RecipeStep> GetRecipeStepsQuery()
        {
            this.ValidateMethod("GetRecipeStepsQuery", null);
            return base.CreateQuery<RecipeStep>("GetRecipeSteps", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RecipeTag"/> entities using the 'GetRecipeTags' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RecipeTag"/> entities.</returns>
        public EntityQuery<RecipeTag> GetRecipeTagsQuery()
        {
            this.ValidateMethod("GetRecipeTagsQuery", null);
            return base.CreateQuery<RecipeTag>("GetRecipeTags", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="State"/> entities using the 'GetStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="State"/> entities.</returns>
        public EntityQuery<State> GetStatesQuery()
        {
            this.ValidateMethod("GetStatesQuery", null);
            return base.CreateQuery<State>("GetStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Tag"/> entities using the 'GetTags' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Tag"/> entities.</returns>
        public EntityQuery<Tag> GetTagsQuery()
        {
            this.ValidateMethod("GetTagsQuery", null);
            return base.CreateQuery<Tag>("GetTags", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Unit"/> entities using the 'GetUnits' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Unit"/> entities.</returns>
        public EntityQuery<Unit> GetUnitsQuery()
        {
            this.ValidateMethod("GetUnitsQuery", null);
            return base.CreateQuery<Unit>("GetUnits", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FoodFightDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FoodFightDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IFoodFightDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEquipmentTags' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetEquipmentTagsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetEquipmentTags", ReplyAction="http://tempuri.org/FoodFightDomainService/GetEquipmentTagsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEquipmentTags(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEquipmentTags'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEquipmentTags'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEquipmentTags' operation.</returns>
            QueryResult<EquipmentTag> EndGetEquipmentTags(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFoodGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetFoodGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetFoodGroups", ReplyAction="http://tempuri.org/FoodFightDomainService/GetFoodGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFoodGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFoodGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFoodGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFoodGroups' operation.</returns>
            QueryResult<FoodGroup> EndGetFoodGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIngredients' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetIngredientsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetIngredients", ReplyAction="http://tempuri.org/FoodFightDomainService/GetIngredientsResponse")]
            [WebGet()]
            IAsyncResult BeginGetIngredients(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIngredients'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIngredients'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIngredients' operation.</returns>
            QueryResult<Ingredient> EndGetIngredients(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipe' operation.
            /// </summary>
            /// <param name="RecipeID">The value for the 'RecipeID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipe", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipeResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipe(int RecipeID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipe'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipe'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipe' operation.</returns>
            QueryResult<Recipe> EndGetRecipe(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipeEquipmentTags' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipeEquipmentTagsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipeEquipmentTags", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipeEquipmentTagsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipeEquipmentTags(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipeEquipmentTags'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipeEquipmentTags'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipeEquipmentTags' operation.</returns>
            QueryResult<RecipeEquipmentTag> EndGetRecipeEquipmentTags(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipeFoodGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipeFoodGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipeFoodGroups", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipeFoodGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipeFoodGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipeFoodGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipeFoodGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipeFoodGroups' operation.</returns>
            QueryResult<RecipeFoodGroup> EndGetRecipeFoodGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipeIngredients' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipeIngredientsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipeIngredients", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipeIngredientsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipeIngredients(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipeIngredients'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipeIngredients'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipeIngredients' operation.</returns>
            QueryResult<RecipeIngredient> EndGetRecipeIngredients(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipes", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipes' operation.</returns>
            QueryResult<Recipe> EndGetRecipes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipeSteps' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipeStepsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipeSteps", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipeStepsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipeSteps(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipeSteps'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipeSteps'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipeSteps' operation.</returns>
            QueryResult<RecipeStep> EndGetRecipeSteps(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecipeTags' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetRecipeTagsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetRecipeTags", ReplyAction="http://tempuri.org/FoodFightDomainService/GetRecipeTagsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRecipeTags(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecipeTags'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecipeTags'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecipeTags' operation.</returns>
            QueryResult<RecipeTag> EndGetRecipeTags(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetStates", ReplyAction="http://tempuri.org/FoodFightDomainService/GetStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStates' operation.</returns>
            QueryResult<State> EndGetStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTags' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetTagsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetTags", ReplyAction="http://tempuri.org/FoodFightDomainService/GetTagsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTags(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTags'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTags'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTags' operation.</returns>
            QueryResult<Tag> EndGetTags(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUnits' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/GetUnitsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/GetUnits", ReplyAction="http://tempuri.org/FoodFightDomainService/GetUnitsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUnits(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUnits'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUnits'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUnits' operation.</returns>
            QueryResult<Unit> EndGetUnits(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FoodFightDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FoodFightDomainService/SubmitChanges", ReplyAction="http://tempuri.org/FoodFightDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class FoodFightDomainContextEntityContainer : EntityContainer
        {
            
            public FoodFightDomainContextEntityContainer()
            {
                this.CreateEntitySet<EquipmentTag>(EntitySetOperations.All);
                this.CreateEntitySet<FoodGroup>(EntitySetOperations.All);
                this.CreateEntitySet<Ingredient>(EntitySetOperations.All);
                this.CreateEntitySet<Recipe>(EntitySetOperations.All);
                this.CreateEntitySet<RecipeEquipmentTag>(EntitySetOperations.All);
                this.CreateEntitySet<RecipeFoodGroup>(EntitySetOperations.All);
                this.CreateEntitySet<RecipeIngredient>(EntitySetOperations.All);
                this.CreateEntitySet<RecipeStep>(EntitySetOperations.All);
                this.CreateEntitySet<RecipeTag>(EntitySetOperations.All);
                this.CreateEntitySet<State>(EntitySetOperations.All);
                this.CreateEntitySet<Tag>(EntitySetOperations.All);
                this.CreateEntitySet<Unit>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'FoodGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class FoodGroup : Entity
    {
        
        private int _foodGroupID;
        
        private string _name;
        
        private EntityCollection<RecipeFoodGroup> _recipeFoodGroups;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFoodGroupIDChanging(int value);
        partial void OnFoodGroupIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodGroup"/> class.
        /// </summary>
        public FoodGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FoodGroupID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FoodGroupID
        {
            get
            {
                return this._foodGroupID;
            }
            set
            {
                if ((this._foodGroupID != value))
                {
                    this.OnFoodGroupIDChanging(value);
                    this.ValidateProperty("FoodGroupID", value);
                    this._foodGroupID = value;
                    this.RaisePropertyChanged("FoodGroupID");
                    this.OnFoodGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeFoodGroup"/> entities.
        /// </summary>
        [Association("FoodGroup_RecipeFoodGroup", "FoodGroupID", "FoodGroupID")]
        [XmlIgnore()]
        public EntityCollection<RecipeFoodGroup> RecipeFoodGroups
        {
            get
            {
                if ((this._recipeFoodGroups == null))
                {
                    this._recipeFoodGroups = new EntityCollection<RecipeFoodGroup>(this, "RecipeFoodGroups", this.FilterRecipeFoodGroups, this.AttachRecipeFoodGroups, this.DetachRecipeFoodGroups);
                }
                return this._recipeFoodGroups;
            }
        }
        
        private void AttachRecipeFoodGroups(RecipeFoodGroup entity)
        {
            entity.FoodGroup = this;
        }
        
        private void DetachRecipeFoodGroups(RecipeFoodGroup entity)
        {
            entity.FoodGroup = null;
        }
        
        private bool FilterRecipeFoodGroups(RecipeFoodGroup entity)
        {
            return (entity.FoodGroupID == this.FoodGroupID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._foodGroupID;
        }
    }
    
    /// <summary>
    /// The 'Ingredient' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class Ingredient : Entity
    {
        
        private int _ingredientID;
        
        private string _name;
        
        private EntityCollection<RecipeIngredient> _recipeIngredients;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIngredientIDChanging(int value);
        partial void OnIngredientIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Ingredient"/> class.
        /// </summary>
        public Ingredient()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IngredientID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IngredientID
        {
            get
            {
                return this._ingredientID;
            }
            set
            {
                if ((this._ingredientID != value))
                {
                    this.OnIngredientIDChanging(value);
                    this.ValidateProperty("IngredientID", value);
                    this._ingredientID = value;
                    this.RaisePropertyChanged("IngredientID");
                    this.OnIngredientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeIngredient"/> entities.
        /// </summary>
        [Association("Ingredient_RecipeIngredient", "IngredientID", "IngredientID")]
        [XmlIgnore()]
        public EntityCollection<RecipeIngredient> RecipeIngredients
        {
            get
            {
                if ((this._recipeIngredients == null))
                {
                    this._recipeIngredients = new EntityCollection<RecipeIngredient>(this, "RecipeIngredients", this.FilterRecipeIngredients, this.AttachRecipeIngredients, this.DetachRecipeIngredients);
                }
                return this._recipeIngredients;
            }
        }
        
        private void AttachRecipeIngredients(RecipeIngredient entity)
        {
            entity.Ingredient = this;
        }
        
        private void DetachRecipeIngredients(RecipeIngredient entity)
        {
            entity.Ingredient = null;
        }
        
        private bool FilterRecipeIngredients(RecipeIngredient entity)
        {
            return (entity.IngredientID == this.IngredientID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._ingredientID;
        }
    }
    
    /// <summary>
    /// The 'Recipe' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class Recipe : Entity
    {
        
        private Nullable<TimeSpan> _cookingTime;
        
        private string _description;
        
        private string _name;
        
        private byte[] _picture;
        
        private EntityCollection<RecipeEquipmentTag> _recipeEquipmentTags;
        
        private EntityCollection<RecipeFoodGroup> _recipeFoodGroups;
        
        private int _recipeID;
        
        private EntityCollection<RecipeIngredient> _recipeIngredients;
        
        private EntityCollection<RecipeStep> _recipeSteps;
        
        private EntityCollection<RecipeTag> _recipeTags;
        
        private int _serves;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCookingTimeChanging(Nullable<TimeSpan> value);
        partial void OnCookingTimeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();
        partial void OnRecipeIDChanging(int value);
        partial void OnRecipeIDChanged();
        partial void OnServesChanging(int value);
        partial void OnServesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Recipe"/> class.
        /// </summary>
        public Recipe()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CookingTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<TimeSpan> CookingTime
        {
            get
            {
                return this._cookingTime;
            }
            set
            {
                if ((this._cookingTime != value))
                {
                    this.OnCookingTimeChanging(value);
                    this.RaiseDataMemberChanging("CookingTime");
                    this.ValidateProperty("CookingTime", value);
                    this._cookingTime = value;
                    this.RaiseDataMemberChanged("CookingTime");
                    this.OnCookingTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(1024)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Picture' value.
        /// </summary>
        [DataMember()]
        public byte[] Picture
        {
            get
            {
                return this._picture;
            }
            set
            {
                if ((this._picture != value))
                {
                    this.OnPictureChanging(value);
                    this.RaiseDataMemberChanging("Picture");
                    this.ValidateProperty("Picture", value);
                    this._picture = value;
                    this.RaiseDataMemberChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeEquipmentTag"/> entities.
        /// </summary>
        [Association("Recipe_RecipeEquipmentTag", "RecipeID", "RecipeID")]
        [XmlIgnore()]
        public EntityCollection<RecipeEquipmentTag> RecipeEquipmentTags
        {
            get
            {
                if ((this._recipeEquipmentTags == null))
                {
                    this._recipeEquipmentTags = new EntityCollection<RecipeEquipmentTag>(this, "RecipeEquipmentTags", this.FilterRecipeEquipmentTags, this.AttachRecipeEquipmentTags, this.DetachRecipeEquipmentTags);
                }
                return this._recipeEquipmentTags;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeFoodGroup"/> entities.
        /// </summary>
        [Association("Recipe_RecipeFoodGroup", "RecipeID", "RecipeID")]
        [XmlIgnore()]
        public EntityCollection<RecipeFoodGroup> RecipeFoodGroups
        {
            get
            {
                if ((this._recipeFoodGroups == null))
                {
                    this._recipeFoodGroups = new EntityCollection<RecipeFoodGroup>(this, "RecipeFoodGroups", this.FilterRecipeFoodGroups, this.AttachRecipeFoodGroups, this.DetachRecipeFoodGroups);
                }
                return this._recipeFoodGroups;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecipeID
        {
            get
            {
                return this._recipeID;
            }
            set
            {
                if ((this._recipeID != value))
                {
                    this.OnRecipeIDChanging(value);
                    this.ValidateProperty("RecipeID", value);
                    this._recipeID = value;
                    this.RaisePropertyChanged("RecipeID");
                    this.OnRecipeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeIngredient"/> entities.
        /// </summary>
        [Association("Recipe_RecipeIngredient", "RecipeID", "RecipeID")]
        [XmlIgnore()]
        public EntityCollection<RecipeIngredient> RecipeIngredients
        {
            get
            {
                if ((this._recipeIngredients == null))
                {
                    this._recipeIngredients = new EntityCollection<RecipeIngredient>(this, "RecipeIngredients", this.FilterRecipeIngredients, this.AttachRecipeIngredients, this.DetachRecipeIngredients);
                }
                return this._recipeIngredients;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeStep"/> entities.
        /// </summary>
        [Association("Recipe_RecipeStep", "RecipeID", "RecipeID")]
        [XmlIgnore()]
        public EntityCollection<RecipeStep> RecipeSteps
        {
            get
            {
                if ((this._recipeSteps == null))
                {
                    this._recipeSteps = new EntityCollection<RecipeStep>(this, "RecipeSteps", this.FilterRecipeSteps, this.AttachRecipeSteps, this.DetachRecipeSteps);
                }
                return this._recipeSteps;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeTag"/> entities.
        /// </summary>
        [Association("Recipe_RecipeTag", "RecipeID", "RecipeID")]
        [XmlIgnore()]
        public EntityCollection<RecipeTag> RecipeTags
        {
            get
            {
                if ((this._recipeTags == null))
                {
                    this._recipeTags = new EntityCollection<RecipeTag>(this, "RecipeTags", this.FilterRecipeTags, this.AttachRecipeTags, this.DetachRecipeTags);
                }
                return this._recipeTags;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Serves' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(4)]
        public int Serves
        {
            get
            {
                return this._serves;
            }
            set
            {
                if ((this._serves != value))
                {
                    this.OnServesChanging(value);
                    this.RaiseDataMemberChanging("Serves");
                    this.ValidateProperty("Serves", value);
                    this._serves = value;
                    this.RaiseDataMemberChanged("Serves");
                    this.OnServesChanged();
                }
            }
        }
        
        private void AttachRecipeEquipmentTags(RecipeEquipmentTag entity)
        {
            entity.Recipe = this;
        }
        
        private void DetachRecipeEquipmentTags(RecipeEquipmentTag entity)
        {
            entity.Recipe = null;
        }
        
        private bool FilterRecipeEquipmentTags(RecipeEquipmentTag entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        private void AttachRecipeFoodGroups(RecipeFoodGroup entity)
        {
            entity.Recipe = this;
        }
        
        private void DetachRecipeFoodGroups(RecipeFoodGroup entity)
        {
            entity.Recipe = null;
        }
        
        private bool FilterRecipeFoodGroups(RecipeFoodGroup entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        private void AttachRecipeIngredients(RecipeIngredient entity)
        {
            entity.Recipe = this;
        }
        
        private void DetachRecipeIngredients(RecipeIngredient entity)
        {
            entity.Recipe = null;
        }
        
        private bool FilterRecipeIngredients(RecipeIngredient entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        private void AttachRecipeSteps(RecipeStep entity)
        {
            entity.Recipe = this;
        }
        
        private void DetachRecipeSteps(RecipeStep entity)
        {
            entity.Recipe = null;
        }
        
        private bool FilterRecipeSteps(RecipeStep entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        private void AttachRecipeTags(RecipeTag entity)
        {
            entity.Recipe = this;
        }
        
        private void DetachRecipeTags(RecipeTag entity)
        {
            entity.Recipe = null;
        }
        
        private bool FilterRecipeTags(RecipeTag entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recipeID;
        }
    }
    
    /// <summary>
    /// The 'RecipeEquipmentTag' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class RecipeEquipmentTag : Entity
    {
        
        private EntityRef<EquipmentTag> _equipmentTag;
        
        private int _equipmentTagID;
        
        private EntityRef<Recipe> _recipe;
        
        private int _recipeEquipmentTagID;
        
        private int _recipeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEquipmentTagIDChanging(int value);
        partial void OnEquipmentTagIDChanged();
        partial void OnRecipeEquipmentTagIDChanging(int value);
        partial void OnRecipeEquipmentTagIDChanged();
        partial void OnRecipeIDChanging(int value);
        partial void OnRecipeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeEquipmentTag"/> class.
        /// </summary>
        public RecipeEquipmentTag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EquipmentTag"/> entity.
        /// </summary>
        [Association("EquipmentTag_RecipeEquipmentTag", "EquipmentTagID", "EquipmentTagID", IsForeignKey=true)]
        [XmlIgnore()]
        public EquipmentTag EquipmentTag
        {
            get
            {
                if ((this._equipmentTag == null))
                {
                    this._equipmentTag = new EntityRef<EquipmentTag>(this, "EquipmentTag", this.FilterEquipmentTag);
                }
                return this._equipmentTag.Entity;
            }
            set
            {
                EquipmentTag previous = this.EquipmentTag;
                if ((previous != value))
                {
                    this.ValidateProperty("EquipmentTag", value);
                    if ((previous != null))
                    {
                        this._equipmentTag.Entity = null;
                        previous.RecipeEquipmentTags.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EquipmentTagID = value.EquipmentTagID;
                    }
                    else
                    {
                        this.EquipmentTagID = default(int);
                    }
                    this._equipmentTag.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeEquipmentTags.Add(this);
                    }
                    this.RaisePropertyChanged("EquipmentTag");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentTagID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int EquipmentTagID
        {
            get
            {
                return this._equipmentTagID;
            }
            set
            {
                if ((this._equipmentTagID != value))
                {
                    this.OnEquipmentTagIDChanging(value);
                    this.RaiseDataMemberChanging("EquipmentTagID");
                    this.ValidateProperty("EquipmentTagID", value);
                    this._equipmentTagID = value;
                    this.RaiseDataMemberChanged("EquipmentTagID");
                    this.OnEquipmentTagIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Recipe"/> entity.
        /// </summary>
        [Association("Recipe_RecipeEquipmentTag", "RecipeID", "RecipeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Recipe Recipe
        {
            get
            {
                if ((this._recipe == null))
                {
                    this._recipe = new EntityRef<Recipe>(this, "Recipe", this.FilterRecipe);
                }
                return this._recipe.Entity;
            }
            set
            {
                Recipe previous = this.Recipe;
                if ((previous != value))
                {
                    this.ValidateProperty("Recipe", value);
                    if ((previous != null))
                    {
                        this._recipe.Entity = null;
                        previous.RecipeEquipmentTags.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecipeID = value.RecipeID;
                    }
                    else
                    {
                        this.RecipeID = default(int);
                    }
                    this._recipe.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeEquipmentTags.Add(this);
                    }
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeEquipmentTagID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecipeEquipmentTagID
        {
            get
            {
                return this._recipeEquipmentTagID;
            }
            set
            {
                if ((this._recipeEquipmentTagID != value))
                {
                    this.OnRecipeEquipmentTagIDChanging(value);
                    this.ValidateProperty("RecipeEquipmentTagID", value);
                    this._recipeEquipmentTagID = value;
                    this.RaisePropertyChanged("RecipeEquipmentTagID");
                    this.OnRecipeEquipmentTagIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RecipeID
        {
            get
            {
                return this._recipeID;
            }
            set
            {
                if ((this._recipeID != value))
                {
                    this.OnRecipeIDChanging(value);
                    this.RaiseDataMemberChanging("RecipeID");
                    this.ValidateProperty("RecipeID", value);
                    this._recipeID = value;
                    this.RaiseDataMemberChanged("RecipeID");
                    this.OnRecipeIDChanged();
                }
            }
        }
        
        private bool FilterEquipmentTag(EquipmentTag entity)
        {
            return (entity.EquipmentTagID == this.EquipmentTagID);
        }
        
        private bool FilterRecipe(Recipe entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recipeEquipmentTagID;
        }
    }
    
    /// <summary>
    /// The 'RecipeFoodGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class RecipeFoodGroup : Entity
    {
        
        private decimal _amount;
        
        private EntityRef<FoodGroup> _foodGroup;
        
        private int _foodGroupID;
        
        private EntityRef<Recipe> _recipe;
        
        private int _recipeFoodGroupID;
        
        private int _recipeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnFoodGroupIDChanging(int value);
        partial void OnFoodGroupIDChanged();
        partial void OnRecipeFoodGroupIDChanging(int value);
        partial void OnRecipeFoodGroupIDChanged();
        partial void OnRecipeIDChanging(int value);
        partial void OnRecipeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeFoodGroup"/> class.
        /// </summary>
        public RecipeFoodGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public decimal Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FoodGroup"/> entity.
        /// </summary>
        [Association("FoodGroup_RecipeFoodGroup", "FoodGroupID", "FoodGroupID", IsForeignKey=true)]
        [XmlIgnore()]
        public FoodGroup FoodGroup
        {
            get
            {
                if ((this._foodGroup == null))
                {
                    this._foodGroup = new EntityRef<FoodGroup>(this, "FoodGroup", this.FilterFoodGroup);
                }
                return this._foodGroup.Entity;
            }
            set
            {
                FoodGroup previous = this.FoodGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("FoodGroup", value);
                    if ((previous != null))
                    {
                        this._foodGroup.Entity = null;
                        previous.RecipeFoodGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FoodGroupID = value.FoodGroupID;
                    }
                    else
                    {
                        this.FoodGroupID = default(int);
                    }
                    this._foodGroup.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeFoodGroups.Add(this);
                    }
                    this.RaisePropertyChanged("FoodGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FoodGroupID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FoodGroupID
        {
            get
            {
                return this._foodGroupID;
            }
            set
            {
                if ((this._foodGroupID != value))
                {
                    this.OnFoodGroupIDChanging(value);
                    this.RaiseDataMemberChanging("FoodGroupID");
                    this.ValidateProperty("FoodGroupID", value);
                    this._foodGroupID = value;
                    this.RaiseDataMemberChanged("FoodGroupID");
                    this.OnFoodGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Recipe"/> entity.
        /// </summary>
        [Association("Recipe_RecipeFoodGroup", "RecipeID", "RecipeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Recipe Recipe
        {
            get
            {
                if ((this._recipe == null))
                {
                    this._recipe = new EntityRef<Recipe>(this, "Recipe", this.FilterRecipe);
                }
                return this._recipe.Entity;
            }
            set
            {
                Recipe previous = this.Recipe;
                if ((previous != value))
                {
                    this.ValidateProperty("Recipe", value);
                    if ((previous != null))
                    {
                        this._recipe.Entity = null;
                        previous.RecipeFoodGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecipeID = value.RecipeID;
                    }
                    else
                    {
                        this.RecipeID = default(int);
                    }
                    this._recipe.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeFoodGroups.Add(this);
                    }
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeFoodGroupID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecipeFoodGroupID
        {
            get
            {
                return this._recipeFoodGroupID;
            }
            set
            {
                if ((this._recipeFoodGroupID != value))
                {
                    this.OnRecipeFoodGroupIDChanging(value);
                    this.ValidateProperty("RecipeFoodGroupID", value);
                    this._recipeFoodGroupID = value;
                    this.RaisePropertyChanged("RecipeFoodGroupID");
                    this.OnRecipeFoodGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RecipeID
        {
            get
            {
                return this._recipeID;
            }
            set
            {
                if ((this._recipeID != value))
                {
                    this.OnRecipeIDChanging(value);
                    this.RaiseDataMemberChanging("RecipeID");
                    this.ValidateProperty("RecipeID", value);
                    this._recipeID = value;
                    this.RaiseDataMemberChanged("RecipeID");
                    this.OnRecipeIDChanged();
                }
            }
        }
        
        private bool FilterFoodGroup(FoodGroup entity)
        {
            return (entity.FoodGroupID == this.FoodGroupID);
        }
        
        private bool FilterRecipe(Recipe entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recipeFoodGroupID;
        }
    }
    
    /// <summary>
    /// The 'RecipeIngredient' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class RecipeIngredient : Entity
    {
        
        private Nullable<int> _aliasForRecipeIngredientID;
        
        private decimal _amount;
        
        private EntityRef<Ingredient> _ingredient;
        
        private int _ingredientID;
        
        private EntityRef<Recipe> _recipe;
        
        private int _recipeID;
        
        private EntityCollection<RecipeIngredient> _recipeIngredient1;
        
        private EntityRef<RecipeIngredient> _recipeIngredient2;
        
        private int _recipeIngredientID;
        
        private EntityRef<State> _state;
        
        private Nullable<int> _stateID;
        
        private EntityRef<Unit> _unit;
        
        private Nullable<int> _unitID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAliasForRecipeIngredientIDChanging(Nullable<int> value);
        partial void OnAliasForRecipeIngredientIDChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnIngredientIDChanging(int value);
        partial void OnIngredientIDChanged();
        partial void OnRecipeIDChanging(int value);
        partial void OnRecipeIDChanged();
        partial void OnRecipeIngredientIDChanging(int value);
        partial void OnRecipeIngredientIDChanged();
        partial void OnStateIDChanging(Nullable<int> value);
        partial void OnStateIDChanged();
        partial void OnUnitIDChanging(Nullable<int> value);
        partial void OnUnitIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeIngredient"/> class.
        /// </summary>
        public RecipeIngredient()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AliasForRecipeIngredientID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> AliasForRecipeIngredientID
        {
            get
            {
                return this._aliasForRecipeIngredientID;
            }
            set
            {
                if ((this._aliasForRecipeIngredientID != value))
                {
                    this.OnAliasForRecipeIngredientIDChanging(value);
                    this.RaiseDataMemberChanging("AliasForRecipeIngredientID");
                    this.ValidateProperty("AliasForRecipeIngredientID", value);
                    this._aliasForRecipeIngredientID = value;
                    this.RaiseDataMemberChanged("AliasForRecipeIngredientID");
                    this.OnAliasForRecipeIngredientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public decimal Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Ingredient"/> entity.
        /// </summary>
        [Association("Ingredient_RecipeIngredient", "IngredientID", "IngredientID", IsForeignKey=true)]
        [XmlIgnore()]
        public Ingredient Ingredient
        {
            get
            {
                if ((this._ingredient == null))
                {
                    this._ingredient = new EntityRef<Ingredient>(this, "Ingredient", this.FilterIngredient);
                }
                return this._ingredient.Entity;
            }
            set
            {
                Ingredient previous = this.Ingredient;
                if ((previous != value))
                {
                    this.ValidateProperty("Ingredient", value);
                    if ((previous != null))
                    {
                        this._ingredient.Entity = null;
                        previous.RecipeIngredients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IngredientID = value.IngredientID;
                    }
                    else
                    {
                        this.IngredientID = default(int);
                    }
                    this._ingredient.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeIngredients.Add(this);
                    }
                    this.RaisePropertyChanged("Ingredient");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IngredientID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IngredientID
        {
            get
            {
                return this._ingredientID;
            }
            set
            {
                if ((this._ingredientID != value))
                {
                    this.OnIngredientIDChanging(value);
                    this.RaiseDataMemberChanging("IngredientID");
                    this.ValidateProperty("IngredientID", value);
                    this._ingredientID = value;
                    this.RaiseDataMemberChanged("IngredientID");
                    this.OnIngredientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Recipe"/> entity.
        /// </summary>
        [Association("Recipe_RecipeIngredient", "RecipeID", "RecipeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Recipe Recipe
        {
            get
            {
                if ((this._recipe == null))
                {
                    this._recipe = new EntityRef<Recipe>(this, "Recipe", this.FilterRecipe);
                }
                return this._recipe.Entity;
            }
            set
            {
                Recipe previous = this.Recipe;
                if ((previous != value))
                {
                    this.ValidateProperty("Recipe", value);
                    if ((previous != null))
                    {
                        this._recipe.Entity = null;
                        previous.RecipeIngredients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecipeID = value.RecipeID;
                    }
                    else
                    {
                        this.RecipeID = default(int);
                    }
                    this._recipe.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeIngredients.Add(this);
                    }
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RecipeID
        {
            get
            {
                return this._recipeID;
            }
            set
            {
                if ((this._recipeID != value))
                {
                    this.OnRecipeIDChanging(value);
                    this.RaiseDataMemberChanging("RecipeID");
                    this.ValidateProperty("RecipeID", value);
                    this._recipeID = value;
                    this.RaiseDataMemberChanged("RecipeID");
                    this.OnRecipeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeIngredient"/> entities.
        /// </summary>
        [Association("RecipeIngredient_RecipeIngredient", "RecipeIngredientID", "AliasForRecipeIngredientID")]
        [XmlIgnore()]
        public EntityCollection<RecipeIngredient> RecipeIngredient1
        {
            get
            {
                if ((this._recipeIngredient1 == null))
                {
                    this._recipeIngredient1 = new EntityCollection<RecipeIngredient>(this, "RecipeIngredient1", this.FilterRecipeIngredient1, this.AttachRecipeIngredient1, this.DetachRecipeIngredient1);
                }
                return this._recipeIngredient1;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RecipeIngredient"/> entity.
        /// </summary>
        [Association("RecipeIngredient_RecipeIngredient", "AliasForRecipeIngredientID", "RecipeIngredientID", IsForeignKey=true)]
        [XmlIgnore()]
        public RecipeIngredient RecipeIngredient2
        {
            get
            {
                if ((this._recipeIngredient2 == null))
                {
                    this._recipeIngredient2 = new EntityRef<RecipeIngredient>(this, "RecipeIngredient2", this.FilterRecipeIngredient2);
                }
                return this._recipeIngredient2.Entity;
            }
            set
            {
                RecipeIngredient previous = this.RecipeIngredient2;
                if ((previous != value))
                {
                    this.ValidateProperty("RecipeIngredient2", value);
                    if ((previous != null))
                    {
                        this._recipeIngredient2.Entity = null;
                        previous.RecipeIngredient1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AliasForRecipeIngredientID = value.RecipeIngredientID;
                    }
                    else
                    {
                        this.AliasForRecipeIngredientID = default(Nullable<int>);
                    }
                    this._recipeIngredient2.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeIngredient1.Add(this);
                    }
                    this.RaisePropertyChanged("RecipeIngredient2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeIngredientID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecipeIngredientID
        {
            get
            {
                return this._recipeIngredientID;
            }
            set
            {
                if ((this._recipeIngredientID != value))
                {
                    this.OnRecipeIngredientIDChanging(value);
                    this.ValidateProperty("RecipeIngredientID", value);
                    this._recipeIngredientID = value;
                    this.RaisePropertyChanged("RecipeIngredientID");
                    this.OnRecipeIngredientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_RecipeIngredient", "StateID", "StateID", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.RecipeIngredients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.StateID = value.StateID;
                    }
                    else
                    {
                        this.StateID = default(Nullable<int>);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeIngredients.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> StateID
        {
            get
            {
                return this._stateID;
            }
            set
            {
                if ((this._stateID != value))
                {
                    this.OnStateIDChanging(value);
                    this.RaiseDataMemberChanging("StateID");
                    this.ValidateProperty("StateID", value);
                    this._stateID = value;
                    this.RaiseDataMemberChanged("StateID");
                    this.OnStateIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Unit"/> entity.
        /// </summary>
        [Association("Unit_RecipeIngredient", "UnitID", "UnitID", IsForeignKey=true)]
        [XmlIgnore()]
        public Unit Unit
        {
            get
            {
                if ((this._unit == null))
                {
                    this._unit = new EntityRef<Unit>(this, "Unit", this.FilterUnit);
                }
                return this._unit.Entity;
            }
            set
            {
                Unit previous = this.Unit;
                if ((previous != value))
                {
                    this.ValidateProperty("Unit", value);
                    if ((previous != null))
                    {
                        this._unit.Entity = null;
                        previous.RecipeIngredients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UnitID = value.UnitID;
                    }
                    else
                    {
                        this.UnitID = default(Nullable<int>);
                    }
                    this._unit.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeIngredients.Add(this);
                    }
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> UnitID
        {
            get
            {
                return this._unitID;
            }
            set
            {
                if ((this._unitID != value))
                {
                    this.OnUnitIDChanging(value);
                    this.RaiseDataMemberChanging("UnitID");
                    this.ValidateProperty("UnitID", value);
                    this._unitID = value;
                    this.RaiseDataMemberChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }
        
        private bool FilterIngredient(Ingredient entity)
        {
            return (entity.IngredientID == this.IngredientID);
        }
        
        private bool FilterRecipe(Recipe entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        private void AttachRecipeIngredient1(RecipeIngredient entity)
        {
            entity.RecipeIngredient2 = this;
        }
        
        private void DetachRecipeIngredient1(RecipeIngredient entity)
        {
            entity.RecipeIngredient2 = null;
        }
        
        private bool FilterRecipeIngredient1(RecipeIngredient entity)
        {
            return (entity.AliasForRecipeIngredientID == this.RecipeIngredientID);
        }
        
        private bool FilterRecipeIngredient2(RecipeIngredient entity)
        {
            return (entity.RecipeIngredientID == this.AliasForRecipeIngredientID);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.StateID == this.StateID);
        }
        
        private bool FilterUnit(Unit entity)
        {
            return (entity.UnitID == this.UnitID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recipeIngredientID;
        }
    }
    
    /// <summary>
    /// The 'RecipeStep' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class RecipeStep : Entity
    {
        
        private string _description;
        
        private byte[] _picture;
        
        private EntityRef<Recipe> _recipe;
        
        private int _recipeID;
        
        private int _recipeStepID;
        
        private int _stepNumber;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPictureChanging(byte[] value);
        partial void OnPictureChanged();
        partial void OnRecipeIDChanging(int value);
        partial void OnRecipeIDChanged();
        partial void OnRecipeStepIDChanging(int value);
        partial void OnRecipeStepIDChanged();
        partial void OnStepNumberChanging(int value);
        partial void OnStepNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeStep"/> class.
        /// </summary>
        public RecipeStep()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Picture' value.
        /// </summary>
        [DataMember()]
        public byte[] Picture
        {
            get
            {
                return this._picture;
            }
            set
            {
                if ((this._picture != value))
                {
                    this.OnPictureChanging(value);
                    this.RaiseDataMemberChanging("Picture");
                    this.ValidateProperty("Picture", value);
                    this._picture = value;
                    this.RaiseDataMemberChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Recipe"/> entity.
        /// </summary>
        [Association("Recipe_RecipeStep", "RecipeID", "RecipeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Recipe Recipe
        {
            get
            {
                if ((this._recipe == null))
                {
                    this._recipe = new EntityRef<Recipe>(this, "Recipe", this.FilterRecipe);
                }
                return this._recipe.Entity;
            }
            set
            {
                Recipe previous = this.Recipe;
                if ((previous != value))
                {
                    this.ValidateProperty("Recipe", value);
                    if ((previous != null))
                    {
                        this._recipe.Entity = null;
                        previous.RecipeSteps.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecipeID = value.RecipeID;
                    }
                    else
                    {
                        this.RecipeID = default(int);
                    }
                    this._recipe.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeSteps.Add(this);
                    }
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RecipeID
        {
            get
            {
                return this._recipeID;
            }
            set
            {
                if ((this._recipeID != value))
                {
                    this.OnRecipeIDChanging(value);
                    this.RaiseDataMemberChanging("RecipeID");
                    this.ValidateProperty("RecipeID", value);
                    this._recipeID = value;
                    this.RaiseDataMemberChanged("RecipeID");
                    this.OnRecipeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeStepID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecipeStepID
        {
            get
            {
                return this._recipeStepID;
            }
            set
            {
                if ((this._recipeStepID != value))
                {
                    this.OnRecipeStepIDChanging(value);
                    this.ValidateProperty("RecipeStepID", value);
                    this._recipeStepID = value;
                    this.RaisePropertyChanged("RecipeStepID");
                    this.OnRecipeStepIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StepNumber' value.
        /// </summary>
        [DataMember()]
        public int StepNumber
        {
            get
            {
                return this._stepNumber;
            }
            set
            {
                if ((this._stepNumber != value))
                {
                    this.OnStepNumberChanging(value);
                    this.RaiseDataMemberChanging("StepNumber");
                    this.ValidateProperty("StepNumber", value);
                    this._stepNumber = value;
                    this.RaiseDataMemberChanged("StepNumber");
                    this.OnStepNumberChanged();
                }
            }
        }
        
        private bool FilterRecipe(Recipe entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recipeStepID;
        }
    }
    
    /// <summary>
    /// The 'RecipeTag' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class RecipeTag : Entity
    {
        
        private EntityRef<Recipe> _recipe;
        
        private int _recipeID;
        
        private int _recipeTagID;
        
        private EntityRef<Tag> _tag;
        
        private int _tagID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRecipeIDChanging(int value);
        partial void OnRecipeIDChanged();
        partial void OnRecipeTagIDChanging(int value);
        partial void OnRecipeTagIDChanged();
        partial void OnTagIDChanging(int value);
        partial void OnTagIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeTag"/> class.
        /// </summary>
        public RecipeTag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Recipe"/> entity.
        /// </summary>
        [Association("Recipe_RecipeTag", "RecipeID", "RecipeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Recipe Recipe
        {
            get
            {
                if ((this._recipe == null))
                {
                    this._recipe = new EntityRef<Recipe>(this, "Recipe", this.FilterRecipe);
                }
                return this._recipe.Entity;
            }
            set
            {
                Recipe previous = this.Recipe;
                if ((previous != value))
                {
                    this.ValidateProperty("Recipe", value);
                    if ((previous != null))
                    {
                        this._recipe.Entity = null;
                        previous.RecipeTags.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecipeID = value.RecipeID;
                    }
                    else
                    {
                        this.RecipeID = default(int);
                    }
                    this._recipe.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeTags.Add(this);
                    }
                    this.RaisePropertyChanged("Recipe");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RecipeID
        {
            get
            {
                return this._recipeID;
            }
            set
            {
                if ((this._recipeID != value))
                {
                    this.OnRecipeIDChanging(value);
                    this.RaiseDataMemberChanging("RecipeID");
                    this.ValidateProperty("RecipeID", value);
                    this._recipeID = value;
                    this.RaiseDataMemberChanged("RecipeID");
                    this.OnRecipeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecipeTagID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecipeTagID
        {
            get
            {
                return this._recipeTagID;
            }
            set
            {
                if ((this._recipeTagID != value))
                {
                    this.OnRecipeTagIDChanging(value);
                    this.ValidateProperty("RecipeTagID", value);
                    this._recipeTagID = value;
                    this.RaisePropertyChanged("RecipeTagID");
                    this.OnRecipeTagIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Tag"/> entity.
        /// </summary>
        [Association("Tag_RecipeTag", "TagID", "TagID", IsForeignKey=true)]
        [XmlIgnore()]
        public Tag Tag
        {
            get
            {
                if ((this._tag == null))
                {
                    this._tag = new EntityRef<Tag>(this, "Tag", this.FilterTag);
                }
                return this._tag.Entity;
            }
            set
            {
                Tag previous = this.Tag;
                if ((previous != value))
                {
                    this.ValidateProperty("Tag", value);
                    if ((previous != null))
                    {
                        this._tag.Entity = null;
                        previous.RecipeTags.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TagID = value.TagID;
                    }
                    else
                    {
                        this.TagID = default(int);
                    }
                    this._tag.Entity = value;
                    if ((value != null))
                    {
                        value.RecipeTags.Add(this);
                    }
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TagID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TagID
        {
            get
            {
                return this._tagID;
            }
            set
            {
                if ((this._tagID != value))
                {
                    this.OnTagIDChanging(value);
                    this.RaiseDataMemberChanging("TagID");
                    this.ValidateProperty("TagID", value);
                    this._tagID = value;
                    this.RaiseDataMemberChanged("TagID");
                    this.OnTagIDChanged();
                }
            }
        }
        
        private bool FilterRecipe(Recipe entity)
        {
            return (entity.RecipeID == this.RecipeID);
        }
        
        private bool FilterTag(Tag entity)
        {
            return (entity.TagID == this.TagID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recipeTagID;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'State' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class State : Entity
    {
        
        private string _description;
        
        private EntityCollection<RecipeIngredient> _recipeIngredients;
        
        private int _stateID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnStateIDChanging(int value);
        partial void OnStateIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="State"/> class.
        /// </summary>
        public State()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeIngredient"/> entities.
        /// </summary>
        [Association("State_RecipeIngredient", "StateID", "StateID")]
        [XmlIgnore()]
        public EntityCollection<RecipeIngredient> RecipeIngredients
        {
            get
            {
                if ((this._recipeIngredients == null))
                {
                    this._recipeIngredients = new EntityCollection<RecipeIngredient>(this, "RecipeIngredients", this.FilterRecipeIngredients, this.AttachRecipeIngredients, this.DetachRecipeIngredients);
                }
                return this._recipeIngredients;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int StateID
        {
            get
            {
                return this._stateID;
            }
            set
            {
                if ((this._stateID != value))
                {
                    this.OnStateIDChanging(value);
                    this.ValidateProperty("StateID", value);
                    this._stateID = value;
                    this.RaisePropertyChanged("StateID");
                    this.OnStateIDChanged();
                }
            }
        }
        
        private void AttachRecipeIngredients(RecipeIngredient entity)
        {
            entity.State = this;
        }
        
        private void DetachRecipeIngredients(RecipeIngredient entity)
        {
            entity.State = null;
        }
        
        private bool FilterRecipeIngredients(RecipeIngredient entity)
        {
            return (entity.StateID == this.StateID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._stateID;
        }
    }
    
    /// <summary>
    /// The 'Tag' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class Tag : Entity
    {
        
        private string _name;
        
        private EntityCollection<RecipeTag> _recipeTags;
        
        private int _tagID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTagIDChanging(int value);
        partial void OnTagIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag"/> class.
        /// </summary>
        public Tag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeTag"/> entities.
        /// </summary>
        [Association("Tag_RecipeTag", "TagID", "TagID")]
        [XmlIgnore()]
        public EntityCollection<RecipeTag> RecipeTags
        {
            get
            {
                if ((this._recipeTags == null))
                {
                    this._recipeTags = new EntityCollection<RecipeTag>(this, "RecipeTags", this.FilterRecipeTags, this.AttachRecipeTags, this.DetachRecipeTags);
                }
                return this._recipeTags;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TagID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TagID
        {
            get
            {
                return this._tagID;
            }
            set
            {
                if ((this._tagID != value))
                {
                    this.OnTagIDChanging(value);
                    this.ValidateProperty("TagID", value);
                    this._tagID = value;
                    this.RaisePropertyChanged("TagID");
                    this.OnTagIDChanged();
                }
            }
        }
        
        private void AttachRecipeTags(RecipeTag entity)
        {
            entity.Tag = this;
        }
        
        private void DetachRecipeTags(RecipeTag entity)
        {
            entity.Tag = null;
        }
        
        private bool FilterRecipeTags(RecipeTag entity)
        {
            return (entity.TagID == this.TagID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._tagID;
        }
    }
    
    /// <summary>
    /// The 'Unit' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class Unit : Entity
    {
        
        private string _name;
        
        private EntityCollection<RecipeIngredient> _recipeIngredients;
        
        private int _unitID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnUnitIDChanging(int value);
        partial void OnUnitIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Unit"/> class.
        /// </summary>
        public Unit()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecipeIngredient"/> entities.
        /// </summary>
        [Association("Unit_RecipeIngredient", "UnitID", "UnitID")]
        [XmlIgnore()]
        public EntityCollection<RecipeIngredient> RecipeIngredients
        {
            get
            {
                if ((this._recipeIngredients == null))
                {
                    this._recipeIngredients = new EntityCollection<RecipeIngredient>(this, "RecipeIngredients", this.FilterRecipeIngredients, this.AttachRecipeIngredients, this.DetachRecipeIngredients);
                }
                return this._recipeIngredients;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UnitID
        {
            get
            {
                return this._unitID;
            }
            set
            {
                if ((this._unitID != value))
                {
                    this.OnUnitIDChanging(value);
                    this.ValidateProperty("UnitID", value);
                    this._unitID = value;
                    this.RaisePropertyChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }
        
        private void AttachRecipeIngredients(RecipeIngredient entity)
        {
            entity.Unit = this;
        }
        
        private void DetachRecipeIngredients(RecipeIngredient entity)
        {
            entity.Unit = null;
        }
        
        private bool FilterRecipeIngredients(RecipeIngredient entity)
        {
            return (entity.UnitID == this.UnitID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._unitID;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoodFightSilverlightClient.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("FoodFightSilverlightClient-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
